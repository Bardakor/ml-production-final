name: ML Production CI/CD

on:
  push:
    branches: [ main, staging, dev ]
  pull_request:
    branches: [ dev ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest-asyncio mlflow requests

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit

    - name: Run unit tests
      run: |
        cd backend
        python -m pytest ../tests/unit/ -v
      env:
        MLFLOW_TRACKING_URI: http://localhost:5000
        SUPABASE_URL: test_url_placeholder
        SUPABASE_ANON_KEY: test_key_placeholder

    - name: Start backend server for integration tests
      run: |
        cd backend
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        echo $! > server.pid
        # Wait for server to be ready
        timeout 30 bash -c 'until curl -f http://localhost:8000/ 2>/dev/null; do sleep 1; done'
      env:
        MLFLOW_TRACKING_URI: http://localhost:5000
        SUPABASE_URL: test_url_placeholder
        SUPABASE_ANON_KEY: test_key_placeholder

    - name: Run integration tests
      run: |
        cd backend
        python -m pytest ../tests/integration/ -v
      env:
        MLFLOW_TRACKING_URI: http://localhost:5000
        SUPABASE_URL: test_url_placeholder
        SUPABASE_ANON_KEY: test_key_placeholder

    - name: Stop backend server
      run: |
        cd backend
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.image.outputs.backend-image }}
      frontend-image: ${{ steps.image.outputs.frontend-image }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Backend
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Extract metadata (tags, labels) for Frontend
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}

    - name: Output image names
      id: image
      run: |
        echo "backend-image=${{ steps.backend-meta.outputs.tags }}" >> $GITHUB_OUTPUT
        echo "frontend-image=${{ steps.frontend-meta.outputs.tags }}" >> $GITHUB_OUTPUT

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment"
        echo "Backend image: ${{ needs.build.outputs.backend-image }}"
        echo "Frontend image: ${{ needs.build.outputs.frontend-image }}"
        # In a real scenario, you would deploy to your staging environment here
        # For example, using kubectl, docker-compose, or cloud provider CLI

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment"
        echo "Backend image: ${{ needs.build.outputs.backend-image }}"
        echo "Frontend image: ${{ needs.build.outputs.frontend-image }}"
        # In a real scenario, you would deploy to your production environment here
        # This is where you would deploy to GCP Cloud Run, AWS ECS, etc.

  branch-workflow:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Branch workflow logic
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          echo "âœ… Pushed to dev branch - tests passed, ready for staging"
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          echo "âœ… Pushed to staging branch - deploying to staging environment"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "âœ… Pushed to main branch - deploying to production"
        fi 